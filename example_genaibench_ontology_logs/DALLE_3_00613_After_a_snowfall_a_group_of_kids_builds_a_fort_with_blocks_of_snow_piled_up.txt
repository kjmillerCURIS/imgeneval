EXAMPLE 2:
After a snowfall, a group of kids builds a fort with blocks of snow piled up.
/usr3/graduate/nivek/data/vislang-domain-exploration-data/imgeneval-data/GenAIBenchImages/DALLE_3/00613.jpeg
Generating candidate graph 0...
Semantic graph is good enough, no need to regenerate!
Generating candidate graph 1...
Found bad relationship (empty subj or obj):
{'subject_ids': [3], 'object_ids': [], 'type': 'spatial only', 'predicate': 'piled up'}
Regenerating semantic graph...
Semantic graph is good enough, no need to regenerate!
Generating candidate graph 2...
Semantic graph is good enough, no need to regenerate!
Candidate graph json colon-counts are: [25, 25, 25]

SEMANTIC GRAPH:
{
  "objects": [
    {"object_id": 1, "name": "kid", "is_group": "Yes", "attributes": []},
    {"object_id": 2, "name": "fort", "is_group": "No", "attributes": []},
    {"object_id": 3, "name": "block", "is_group": "Yes", "attributes": []}
  ],
  "relationships": [
    {"subject_ids": [1], "object_ids": [2], "type": "spatial semantic", "predicate": "build"},
    {"subject_ids": [3], "object_ids": [2], "type": "spatial semantic", "predicate": "piled up"}
  ],
  "scene": {"description": "N/A", "absent_object_names": []}
}

RUNNING OBJECT DETECTOR...
Detected 4 instances of "block" in image
Detected 3 instances of "fort" in image
Detected 6 instances of "kid" in image
No scene/style description specified, no need to check.
No absent objects specified, no need to check.
EVALUATING MATCHES...
CANDIDATE MATCH:
kid{1} ==> kids[6]
fort{2} ==> fort(102,172)
block{3} ==> blocks[4]
CHECKLIST RESULTS FOR CANDIDATE MATCH:
[('Check that there are at least 2 blocks detected', 1),
 ('Check that there are 1 forts detected', 0),
 ('Check that there are at least 2 kids detected', 1),
 ('Check semantic relationship: kids[6] build fort(102,172)', 0.0),
 ('Check spatial relationship: kids[6] next to fort(102,172)', 1.0),
 ('Check semantic relationship: blocks[4] piled up fort(102,172)', 0.0),
 ('Check spatial relationship: blocks[4] on fort(102,172)', 0.0)]
score = 0.42857142857142855

CANDIDATE MATCH:
kid{1} ==> kids[6]
fort{2} ==> fort(216,103)
block{3} ==> blocks[4]
CHECKLIST RESULTS FOR CANDIDATE MATCH:
[('Check that there are at least 2 blocks detected', 1),
 ('Check that there are 1 forts detected', 0),
 ('Check that there are at least 2 kids detected', 1),
 ('Check semantic relationship: kids[6] build fort(216,103)', 0.0),
 ('Check spatial relationship: kids[6] next to fort(216,103)',
  0.9166666666666667),
 ('Check semantic relationship: blocks[4] piled up fort(216,103)', 0.0),
 ('Check spatial relationship: blocks[4] on fort(216,103)', 0.0)]
score = 0.4166666666666667

CANDIDATE MATCH:
kid{1} ==> kids[6]
fort{2} ==> fort(136,167)
block{3} ==> blocks[4]
CHECKLIST RESULTS FOR CANDIDATE MATCH:
[('Check that there are at least 2 blocks detected', 1),
 ('Check that there are 1 forts detected', 0),
 ('Check that there are at least 2 kids detected', 1),
 ('Check semantic relationship: kids[6] build fort(136,167)', 0.0),
 ('Check spatial relationship: kids[6] next to fort(136,167)',
  0.9166666666666667),
 ('Check semantic relationship: blocks[4] piled up fort(136,167)', 0.0),
 ('Check spatial relationship: blocks[4] on fort(136,167)', 0.0)]
score = 0.4166666666666667

BEST MATCH:
kid{1} ==> kids[6]
fort{2} ==> fort(102,172)
block{3} ==> blocks[4]
CHECKLIST RESULTS FOR BEST MATCH:
[('Check that there are at least 2 blocks detected', 1),
 ('Check that there are 1 forts detected', 0),
 ('Check that there are at least 2 kids detected', 1),
 ('Check semantic relationship: kids[6] build fort(102,172)', 0.0),
 ('Check spatial relationship: kids[6] next to fort(102,172)', 1.0),
 ('Check semantic relationship: blocks[4] piled up fort(102,172)', 0.0),
 ('Check spatial relationship: blocks[4] on fort(102,172)', 0.0)]
best_score = 0.42857142857142855



